# Оператор "assert" возбуждает исключение программно при выполнении определенного условия, так же мы можем описать
# данную ошибку. Пока условие равняеться истине ошибки не будет. В данном случае ошибка будет неазываться "AssertionError".
some_text: str = input('Введите текст: ')
assert some_text.isalpha(), f'Вводимый текст должен состоять только из букв'

# # Оператор "raise"  возбуждает исключение программно.
raise IndexError


# Пример функции которая делит первый аргумент на второй
def func_division(x: int, y: int):
    return x / y


# Пример с "try", "except" и "else". Даже если в блоке "try" будет ошибка то блок "except" прехватит ее и мы перейдем
# дальше в блок "else", если блок "try" выполнился без ошибок то мы сразу переходим в блок "else" и затем дальше
# следуя коду. Блок "else" используеться только если есть блок "except"
def check_texst():
    try:
        my_password = input('Введите текст: ')  # Нажать ctrl-d чтобы вызвать ошибку "EOFError"

    except EOFError as error:
        print(f"Не надо было нажимать ctrl-d вы вызвали: {error}")

    else:
        print('Текст будет виден если в блоке "try" не будет ошибок')

    print('Эта запись будет видна если даже будет ошибка')


check_texst()


# Пример с "try" и "finally". Оператор "finally" срабатывает в конце, в любом случае. Если блок "try" выполнился без ошибок
# то мы едем дальше по нашему коду
def some_func():
    try:
        func_division(2, 1)
    finally:
        print("Опеатор 'finnaly' будет выводить этот текст в любом случае, не зависимо будет ошибка или нет ")

    print('Эта запись будет видна если не будет ошибки')


some_func()
